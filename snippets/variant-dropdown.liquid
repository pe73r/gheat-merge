<div class="variant-wrapper {% if option.name == 'Taille' or option.name == 'taille' or option.name == 'Size' or option.name == 'size' %} size-variant-wrapper{% endif %} variant-wrapper--{{ settings.variant_type }} js">
   <label class="variant__label{% if option.name == 'Default' or option.name == 'Title' %} hidden-label{% endif %}"
    for="SingleOptionSelector-{{ section_id }}-option-{{ forloop.index0 }}">
    {{ option.name }}:
  </label>
  <div class=" sizeDropdown-container variant-input-wrap custom-select" data-index="option{{ forloop.index }}" data-handle="{{ option.name | handleize }}">

    <select
      class=" sizeDropdown variant__input-{{ section_id }}"
      id="SingleOptionSelector-{{ section_id }}-option-{{ forloop.index0 }}"
      data-index="option{{ forloop.index }}">
        {% if option.name == 'Taille' or option.name == 'taille' or option.name == 'Size' or option.name == 'size'  or option.name == 'Pointure' or option.name == 'pointure' %}
          <option selected disabled>SÃ©lectionnez une taille</option>
        {% endif%}

      {%- for value in option.values -%}
        {%- liquid
          assign variant_label_state = true
          if product.options.size == 1
            unless product.variants[forloop.index0].available
              assign variant_label_state = false
            endunless
          endif
        -%}

        <option
          value="{{ value | escape }}"
          {% unless variant_label_state %} disabled="disabled"{% endunless %}
          name="{{ option.name }}"
          class="variant-input"
          data-index="option{{ forloop.index }}">
          {{ value }}

        </option>

      {%- endfor -%}
    </select>
    <svg class="sizeDropdown-arrow" width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M11.1428 1L5.99997 7L0.857109 1" stroke="#C2C2C2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
  </div>
</div>
{% if size_guide %}
  <a data-toggle="modal" data-product-id="{{ product.id }}" data-target="#size_chart-{{ product.id }}" class="size-chart-open-popup">
  Guide des tailles
  </a>
{%endif%}

<li class="sales_point">
  <span class="hide icon-and-text{% if inventory_visible == true %} inventory--low {% endif %}">
    <span class="icon icon--inventory"></span>
    <span id="ProductInventory-{{ section_id }}">
      {%- if inventory_visible -%}
        {{ 'products.product.stock_label' | t: count: current_variant.inventory_quantity }}
        low stock
      {%- elsif product.available -%}
        {{ 'products.product.in_stock_label' | t }}
       {% else %} 
        no-stock
      {%- endif -%}
    </span>
  </span>
</li>

{% comment %}
<style>
  /*the container must be positioned relative:*/
  .custom-select {
    position: relative;
    font-family: Arial;
    min-width: 200px;
  }

  .custom-select select {
    display: none; /*hide original SELECT element:*/
  }

  .select-selected {
    background-color: lightgray;
  }

  /*style the arrow inside the select element:*/
  .select-selected:after {
    position: absolute;
    content: "";
    top: 14px;
    right: 10px;
    width: 0;
    height: 0;
    border: 6px solid transparent;
    border-color: #fff transparent transparent transparent;
  }

  /*point the arrow upwards when the select box is open (active):*/
  .select-selected.select-arrow-active:after {
    border-color: transparent transparent #fff transparent;
    top: 7px;
  }

  /*style the items (options), including the selected item:*/
  .select-items div,.select-selected {
    color: #ffffff;
    padding: 8px 16px;
    border: 1px solid transparent;
    border-color: transparent transparent rgba(0, 0, 0, 0.1) transparent;
    cursor: pointer;
    user-select: none;
  }

  /*style items (options):*/
  .select-items {
    position: absolute;
    background-color: lightgray;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 99;
  }

  /*hide the items when the select box is closed:*/
  .select-hide {
    display: none;
  }

  .select-items div:hover, .same-as-selected {
    background-color: rgba(0, 0, 0, 0.1);
  }
  </style>

<script>
  var x, i, j, l, ll, selElmnt, a, b, c;
  /*look for any elements with the class "custom-select":*/
  x = document.getElementsByClassName("custom-select");
  l = x.length;
  for (i = 0; i < l; i++) {
    selElmnt = x[i].getElementsByTagName("select")[0];
    ll = selElmnt.length;
    /*for each element, create a new DIV that will act as the selected item:*/
    a = document.createElement("DIV");
    a.setAttribute("class", "select-selected");
    a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
    x[i].appendChild(a);
    /*for each element, create a new DIV that will contain the option list:*/
    b = document.createElement("DIV");
    b.setAttribute("class", "select-items select-hide");
    for (j = 1; j < ll; j++) {
      /*for each option in the original select element,
      create a new DIV that will act as an option item:*/
      c = document.createElement("DIV");
      c.innerHTML = selElmnt.options[j].innerHTML;
      c.addEventListener("click", function(e) {
          /*when an item is clicked, update the original select box,
          and the selected item:*/
          var y, i, k, s, h, sl, yl;
          s = this.parentNode.parentNode.getElementsByTagName("select")[0];
          sl = s.length;
          h = this.parentNode.previousSibling;
          for (i = 0; i < sl; i++) {
            if (s.options[i].innerHTML == this.innerHTML) {
              s.selectedIndex = i;
              h.innerHTML = this.innerHTML;
              y = this.parentNode.getElementsByClassName("same-as-selected");
              yl = y.length;
              for (k = 0; k < yl; k++) {
                y[k].removeAttribute("class");
              }
              this.setAttribute("class", "same-as-selected");
              break;
            }
          }
          h.click();
      });
      b.appendChild(c);
    }
    x[i].appendChild(b);
    a.addEventListener("click", function(e) {
        /*when the select box is clicked, close any other select boxes,
        and open/close the current select box:*/
        e.stopPropagation();
        closeAllSelect(this);
        this.nextSibling.classList.toggle("select-hide");
        this.classList.toggle("select-arrow-active");
      });
  }
  function closeAllSelect(elmnt) {
    /*a function that will close all select boxes in the document,
    except the current select box:*/
    var x, y, i, xl, yl, arrNo = [];
    x = document.getElementsByClassName("select-items");
    y = document.getElementsByClassName("select-selected");
    xl = x.length;
    yl = y.length;
    for (i = 0; i < yl; i++) {
      if (elmnt == y[i]) {
        arrNo.push(i)
      } else {
        y[i].classList.remove("select-arrow-active");
      }
    }
    for (i = 0; i < xl; i++) {
      if (arrNo.indexOf(i)) {
        x[i].classList.add("select-hide");
      }
    }
  }
  /*if the user clicks anywhere outside the select box,
  then close all select boxes:*/
  document.addEventListener("click", closeAllSelect);
  </script>
{% endcomment %}
